# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import users_pb2 as users__pb2


class userServiceStub(object):
    """UserS service rpc definitions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendVerificationCode = channel.unary_unary(
                '/users.userService/SendVerificationCode',
                request_serializer=users__pb2.request.SerializeToString,
                response_deserializer=users__pb2.response.FromString,
                )
        self.SendWhatsAppOTP = channel.unary_unary(
                '/users.userService/SendWhatsAppOTP',
                request_serializer=users__pb2.request.SerializeToString,
                response_deserializer=users__pb2.response.FromString,
                )
        self.Login = channel.unary_unary(
                '/users.userService/Login',
                request_serializer=users__pb2.request.SerializeToString,
                response_deserializer=users__pb2.response.FromString,
                )
        self.GetBalance = channel.unary_unary(
                '/users.userService/GetBalance',
                request_serializer=users__pb2.request.SerializeToString,
                response_deserializer=users__pb2.response.FromString,
                )
        self.GetDomainForPackageID = channel.unary_unary(
                '/users.userService/GetDomainForPackageID',
                request_serializer=users__pb2.request.SerializeToString,
                response_deserializer=users__pb2.response.FromString,
                )
        self.CreateAccount = channel.unary_unary(
                '/users.userService/CreateAccount',
                request_serializer=users__pb2.request.SerializeToString,
                response_deserializer=users__pb2.response.FromString,
                )
        self.AccountBalance = channel.unary_unary(
                '/users.userService/AccountBalance',
                request_serializer=users__pb2.request.SerializeToString,
                response_deserializer=users__pb2.response.FromString,
                )
        self.RegisterAccount = channel.unary_unary(
                '/users.userService/RegisterAccount',
                request_serializer=users__pb2.request.SerializeToString,
                response_deserializer=users__pb2.response.FromString,
                )
        self.GetAliasNumber = channel.unary_unary(
                '/users.userService/GetAliasNumber',
                request_serializer=users__pb2.request.SerializeToString,
                response_deserializer=users__pb2.response.FromString,
                )
        self.GetWebsocketUrl = channel.unary_unary(
                '/users.userService/GetWebsocketUrl',
                request_serializer=users__pb2.request.SerializeToString,
                response_deserializer=users__pb2.response.FromString,
                )
        self.GetOrignUrl = channel.unary_unary(
                '/users.userService/GetOrignUrl',
                request_serializer=users__pb2.request.SerializeToString,
                response_deserializer=users__pb2.response.FromString,
                )


class userServiceServicer(object):
    """UserS service rpc definitions
    """

    def SendVerificationCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendWhatsAppOTP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDomainForPackageID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAliasNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWebsocketUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrignUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_userServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendVerificationCode': grpc.unary_unary_rpc_method_handler(
                    servicer.SendVerificationCode,
                    request_deserializer=users__pb2.request.FromString,
                    response_serializer=users__pb2.response.SerializeToString,
            ),
            'SendWhatsAppOTP': grpc.unary_unary_rpc_method_handler(
                    servicer.SendWhatsAppOTP,
                    request_deserializer=users__pb2.request.FromString,
                    response_serializer=users__pb2.response.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=users__pb2.request.FromString,
                    response_serializer=users__pb2.response.SerializeToString,
            ),
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=users__pb2.request.FromString,
                    response_serializer=users__pb2.response.SerializeToString,
            ),
            'GetDomainForPackageID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDomainForPackageID,
                    request_deserializer=users__pb2.request.FromString,
                    response_serializer=users__pb2.response.SerializeToString,
            ),
            'CreateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=users__pb2.request.FromString,
                    response_serializer=users__pb2.response.SerializeToString,
            ),
            'AccountBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountBalance,
                    request_deserializer=users__pb2.request.FromString,
                    response_serializer=users__pb2.response.SerializeToString,
            ),
            'RegisterAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAccount,
                    request_deserializer=users__pb2.request.FromString,
                    response_serializer=users__pb2.response.SerializeToString,
            ),
            'GetAliasNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAliasNumber,
                    request_deserializer=users__pb2.request.FromString,
                    response_serializer=users__pb2.response.SerializeToString,
            ),
            'GetWebsocketUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWebsocketUrl,
                    request_deserializer=users__pb2.request.FromString,
                    response_serializer=users__pb2.response.SerializeToString,
            ),
            'GetOrignUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrignUrl,
                    request_deserializer=users__pb2.request.FromString,
                    response_serializer=users__pb2.response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'users.userService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class userService(object):
    """UserS service rpc definitions
    """

    @staticmethod
    def SendVerificationCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.userService/SendVerificationCode',
            users__pb2.request.SerializeToString,
            users__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendWhatsAppOTP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.userService/SendWhatsAppOTP',
            users__pb2.request.SerializeToString,
            users__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.userService/Login',
            users__pb2.request.SerializeToString,
            users__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.userService/GetBalance',
            users__pb2.request.SerializeToString,
            users__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDomainForPackageID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.userService/GetDomainForPackageID',
            users__pb2.request.SerializeToString,
            users__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.userService/CreateAccount',
            users__pb2.request.SerializeToString,
            users__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccountBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.userService/AccountBalance',
            users__pb2.request.SerializeToString,
            users__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.userService/RegisterAccount',
            users__pb2.request.SerializeToString,
            users__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAliasNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.userService/GetAliasNumber',
            users__pb2.request.SerializeToString,
            users__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWebsocketUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.userService/GetWebsocketUrl',
            users__pb2.request.SerializeToString,
            users__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrignUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.userService/GetOrignUrl',
            users__pb2.request.SerializeToString,
            users__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
